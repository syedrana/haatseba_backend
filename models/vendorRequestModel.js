const mongoose = require("mongoose");

const vendorRequestSchema = new mongoose.Schema(
  {
    // ЁЯзНтАНтЩВя╕П ржХрзЛржи ржЗржЙржЬрж╛рж░ ржЖржмрзЗржжржи ржХрж░ржЫрзЗ
    userId: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "User", 
      required: [true, "User ID is required"], 
      index: true 
    },

    // ЁЯПк ржмрзНржпржмрж╕рж╛рж░ ржирж╛ржо
    businessName: { 
      type: String, 
      required: [true, "Business name is required"], 
      trim: true, 
      minlength: [2, "Business name must be at least 2 characters"],
      maxlength: [100, "Business name cannot exceed 100 characters"]
    },

    // ЁЯУН ржмрзНржпржмрж╕рж╛рж░ ржарж┐ржХрж╛ржирж╛
    businessAddress: { 
      type: String, 
      required: [true, "Business address is required"], 
      trim: true, 
      minlength: [5, "Address must be at least 5 characters"]
    },

    // ЁЯз╛ ржЯрзНрж░рзЗржб рж▓рж╛ржЗрж╕рзЗржирзНрж╕ ржиржорзНржмрж░
    tradeLicenseNumber: { 
      type: String, 
      default: "", 
      trim: true, 
      match: [/^[A-Za-z0-9-]*$/, "Trade license number is invalid"]
    },

    // ЁЯУЮ ржмрзНржпржмрж╕рж╛рж░ ржлрзЛржи ржиржорзНржмрж░
    businessPhone: { 
      type: String, 
      required: [true, "Business phone is required"],
      trim: true,
      match: [/^01[0-9]{9}$/, "Invalid Bangladeshi phone number"]
    },

    // ЁЯУз ржмрзНржпржмрж╕рж╛рж░ ржЗржорзЗржЗрж▓ (optional)
    businessEmail: { 
      type: String, 
      trim: true, 
      lowercase: true,
      match: [/^\S+@\S+\.\S+$/, "Invalid email format"]
    },

    // ЁЯПж ржкрзЗржорзЗржирзНржЯ ржЗржиржлрзЛ (ржпржжрж┐ ржХржорж┐рж╢ржи ржмрж╛ ржкрзЗржорзЗржирзНржЯ ржкрж╛ржарж╛рждрзЗ рж╣рзЯ)
    bankAccount: {
      accountName: { type: String, trim: true },
      accountNumber: { type: String, trim: true },
      bankName: { type: String, trim: true },
      branchName: { type: String, trim: true },
      bkashNumber: { type: String, trim: true, match: [/^01[0-9]{9}$/] },
      nagadNumber: { type: String, trim: true, match: [/^01[0-9]{9}$/] },
    },

    // ЁЯУБ ржкрзНрж░рзЯрзЛржЬржирзАрзЯ ржбржХрзБржорзЗржирзНржЯ (cloudinary urls)
    documents: [{ type: String }],

    // ЁЯз╛ ржЖржмрзЗржжржи ржПрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕
    status: { 
      type: String, 
      enum: ["pending", "approved", "rejected"], 
      default: "pending" 
    },

    // ЁЯЧУя╕П ржЕрзНржпрж╛ржбржорж┐ржи ржХржЦржи ржЕрзНржпрж╛ржХрж╢ржи ржирж┐рзЯрзЗржЫрзЗ
    reviewedAt: { 
      type: Date,
      default: null, // тЬЕ рждрж╛рж░рж┐ржЦрзЗрж░ ржЬржирзНржп null рж╕ржарж┐ржХ (ржлрж╛ржБржХрж╛ рж╕рзНржЯрзНрж░рж┐ржВ ржирзЯ)
    },

    // ЁЯСд ржХрзЛржи ржЕрзНржпрж╛ржбржорж┐ржи рж░рж┐ржнрж┐ржЙ ржХрж░рзЗржЫрзЗ
    reviewedBy: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Admin", // тЬЕ ржпржжрж┐ рждрзЛржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржи ржоржбрзЗрж▓рзЗрж░ ржирж╛ржо "Admin" рж╣рзЯ
      default: null,
    },

    // ЁЯТм ржЕрзНржпрж╛ржбржорж┐ржи ржоржирзНрждржмрзНржп (ржпржжрж┐ reject ржХрж░рзЗ)
    adminNote: { 
      type: String, 
      trim: true,
      default: "", // тЬЕ string рж╣рж▓рзЗ ржлрж╛ржБржХрж╛ рж╕рзНржЯрзНрж░рж┐ржВ ржарж┐ржХ ржЖржЫрзЗ
    },

  },
  { timestamps: true } // createdAt, updatedAt рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржпрзЛржЧ рж╣ржмрзЗ
);

module.exports = mongoose.model("VendorRequest", vendorRequestSchema);
